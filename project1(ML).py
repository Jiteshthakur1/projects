# -*- coding: utf-8 -*-
"""Copy of Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P340jgbZG7g5RmdZFK3ZnNupaIZhU7e4

# **Movie Recommendation System**



Recommender System is a system that seeks to predict or filter preferences according to the user's choices. Recommender systems are utilized in a variety of areas including movies, music, news, books, research articles, search queries, social tags, and products in general. Recommender systems produce a list of recommendations in any of the two ways-

Collaborative filtering: Collaborative filtering approaches build a model from the user's past behavior (ie. items purchased or searched by the user) as well as similar decisions made by other users. This model is then used to predict items (or ratings for items) that users may have an interest in.

Content-based filtering: Content-based filtering approaches uses a series of discrete characteristics of an item in order to recommend additional items with similar properties. Content-based filtering methods are totally based on a description of the item and a profile of the user's preferences. It recommends items based on the user's past preferences. Let's develop a basic recommendation system using Python and Pandas.

Let's develop a basic recommendation system by suggesting items that are most similar to a particular item, in this case, movies. It just tells what movies/items are most similar to the user's movie choice.

# **Import Library**
"""

import pandas as pd

import numpy as nm

"""# Import Dataset"""

fd=pd.read_csv(r'https://raw.github.com/YBIFoundation/Dataset/main/Movies%20Recommendation.csv')

fd.head()

fd.info()

fd.shape

fd.columns

"""# Get Feature Selection"""

fd_features=fd[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna(' ')

fd_features.shape

fd_features

x = (
    fd_features['Movie_Genre'] + ' ' +
    fd_features['Movie_Keywords'] + ' ' +
    fd_features['Movie_Tagline'] + ' ' +
    fd_features['Movie_Cast'] + ' ' +
    fd_features['Movie_Director']
)

x.shape

"""# Get Feature Text Conversion to Tokens"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf=TfidfVectorizer()

x=tf.fit_transform(x)

print(x)

"""# Get Similarity Score using Cosine Similarity



cosine similarity computes the L2-normalized dot product of vectors. Euclidean (12) normalization projects the vectors onto the urut spiere. and their dot product is then the cosine of the angle between the points denacted by the vectors.
"""

from sklearn.metrics.pairwise import cosine_similarity

S_Source=cosine_similarity(x)

S_Source

"""# Get Movie Name as input"""

Movi_name=input("Enter movie name : ")

movis=fd['Movie_Title'].tolist()

import difflib

Movie_Recommendation =difflib.get_close_matches(Movi_name, movis)
print(Movie_Recommendation)

close_match=Movie_Recommendation[0]
print(close_match)

Index_of_Close_movies =fd[fd.Movie_Title==close_match]['Movie_ID'].values[0]
print(Index_of_Close_movies)

RS=list(enumerate(S_Source[Index_of_Close_movies]))
print(RS)

len(RS)

"""# Sort Based on Recommendation"""

sorted_movies=sorted(RS,key=lambda x:x[1],reverse=True)
print(sorted_movies)

print("Top 10 recommendation ")
b=1
for a in sorted_movies:
  i=a[0]
  title=fd[fd.index==i]['Movie_Title'].values[0]
  if(i<11):
    print(b," ",title)
    b+=1